import requests
import argparse
from colorama import init, Fore
init()

parser = argparse.ArgumentParser(
                    prog = 'SARP Anti-Unlogged-Exploit',
                    description = 'Test all endpoints to see if vulnerable to post payload',
                    epilog = '')

parser.add_argument('host')           # Host
args = parser.parse_args()

print(Fore.BLUE + '''
          _____                    _____                    _____                    _____          
         /\    \                  /\    \                  /\    \                  /\    \         
        /::\    \                /::\    \                /::\    \                /::\    \        
       /::::\    \              /::::\    \              /::::\    \              /::::\    \       
      /::::::\    \            /::::::\    \            /::::::\    \            /::::::\    \      
     /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \     
    /:::/__\:::\    \        /:::/__\:::\    \        /:::/__\:::\    \        /:::/__\:::\    \    
    \:::\   \:::\    \      /::::\   \:::\    \      /::::\   \:::\    \      /::::\   \:::\    \   
  ___\:::\   \:::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \  
 /\   \:::\   \:::\    \  /:::/\:::\   \:::\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\____\ 
/::\   \:::\   \:::\____\/:::/  \:::\   \:::\____\/:::/  \:::\   \:::|    |/:::/  \:::\   \:::|    |
\:::\   \:::\   \::/    /\::/    \:::\  /:::/    /\::/   |::::\  /:::|____|\::/    \:::\  /:::|____|
 \:::\   \:::\   \/____/  \/____/ \:::\/:::/    /  \/____|:::::\/:::/    /  \/_____/\:::\/:::/    / 
  \:::\   \:::\    \               \::::::/    /         |:::::::::/    /            \::::::/    /  
   \:::\   \:::\____\               \::::/    /          |::|\::::/    /              \::::/    /   
    \:::\  /:::/    /               /:::/    /           |::| \::/____/                \::/____/    
     \:::\/:::/    /               /:::/    /            |::|  ~|                       ~~          
      \::::::/    /               /:::/    /             |::|   |                                   
       \::::/    /               /:::/    /              \::|   |                                   
        \::/    /                \::/    /                \:|   |                                   
         \/____/                  \/____/                  \|___|                                   
                                                                                                    
SARP Penetesting suite
''')

base_url = args.host
urls = ['/logger', '/utenti?/create', '/utenti?/delete', '/utenti?/update', # Endpoints di SARP
'/valutazioni?/create', '/valutazioni?/delete', '/valutazioni?/update',
'/ticket?/create', '/stage?/create', '/stage?/delete', '/stage?/update',
'/logout', '/presenze?/create', '/presenze?/delete', '/presenze?/update', '/login',
'/aziende?/create', '/aziende?/delete', '/aziende?/update', "/aziende?/pdf"]
payload = {'data': "prova"}
headers = {'Host': base_url, 'Origin': base_url}    # Cerchiamo di bypassare Check origin

for url in urls:
    x = requests.post(base_url + url, json = payload, allow_redirects=False, headers=headers)
    if x.status_code == 302 or x.status_code == 405 or x.status_code == 500:    # Redirect o metodo non valido o errore 500(CSRF protection)
        print(Fore.GREEN + "Test passato per l'url " + url)
    else:
        print(Fore.RED + "Test fallito per l'url " + url + " Risposta: " + x.text + " Codice: " + str(x.status_code))

faq = requests.get(base_url + "/faq" , allow_redirects=False, headers=headers)
if faq.status_code != 200:
    print(Fore.GREEN + "Test passato per l'url /faq")
else:
    print(Fore.RED + "Test fallito per l'url /faq" + " Risposta: " + faq.text + " Codice: " + str(faq.status_code))

ping = requests.get(base_url)
if ping.status_code == 200:
    print(Fore.GREEN + "Il web server Ã¨ ancora up. Test passato con successo")
else:
    print(Fore.RED + "Il web server sembra down. Test fallito")