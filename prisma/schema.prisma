// v 0.19.0 2023-09-06

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Tabelle comuni a tutte le applicazioni e dizionari

model Versione {
    versione  String //deve coincidere con la versione di questo file
    createdAt DateTime @default(now())

    @@id([versione, createdAt])
}

model Utente {
    id                       Int                         @id @default(autoincrement())
    createdAt                DateTime                    @default(now())
    updatedAt                DateTime                    @updatedAt
    creatoDa                 Int
    tipo                     String                      @default("STUDENTE")
    nome                     String
    cognome                  String
    natoA                    String?
    natoIl                   DateTime?
    codiceF                  String?
    cartaI                   String?
    email                    String                      @unique
    telefono                 String?
    picture                  String?
    bes                      Boolean?
    can_login                Boolean                     @default(false)
    istituto                 String?
    valuta                   pcto_Valutazione[]
    valutatoPerPCTO          pcto_Valutazione_Studente[]
    presente                 pcto_Presenza[]
    stabilisce               pcto_Azienda[]
    iscritto                 pcto_Pcto[]                 @relation("iscritto")
    Session                  Session[]
    Ticket                   Ticket[]
    ruoli                    ruolo_Utente[]
    iscritto_corso_sicurezza sicurezza_Corso[]
    classe                   Classe?                     @relation(fields: [classeId], references: [id])
    classeId                 Int?
    tutor_pcto               pcto_Pcto[]                 @relation("tutor")
    insegna_in               Insegnamenti[]
    template                 programmazione_Template[]
    quiz_sicurezza           sicurezza_Test[]
}

model Classe {
    id           Int            @id @default(autoincrement())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    classe       String
    istituto     String
    sezione      String
    iscritti     Utente[]
    insegnamenti Insegnamenti[]
    pcto_Pcto    pcto_Pcto[]
}

model Materia {
    id           Int                       @id @default(autoincrement())
    nome         String                    @unique
    insegnata_in Insegnamenti[]
    template     programmazione_Template[]
}

model Insegnamenti {
    id                                      Int     @id @default(autoincrement())
    docente                                 Utente  @relation(fields: [idDocente], references: [id])
    idDocente                               Int
    materia                                 Materia @relation(fields: [idMateria], references: [id])
    idMateria                               Int
    classe                                  Classe  @relation(fields: [idClasse], references: [id])
    idClasse                                Int
    titolare                                Boolean @default(false) //TRUE:docente principale  FALSE: compresenza o altro
    anno                                    Int //solo il primo dei due anni che compongolo l'anno scolastico
    code_classroom                          String?
    programma_primo_quadrimestre            String?
    programma_secondo_quadrimestre          String?
    programma_primo_quadrimestre_completo   Boolean @default(false)
    programma_secondo_quadrimestre_completo Boolean @default(false)
}

model Session {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    login      Utente   @relation(fields: [idUtente], references: [id])
    idUtente   Int      @unique
    session_id String   @unique
    scadenza   DateTime @default(now())
    mobile     Boolean  @default(false)
}

model tipo_Utente {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tipo      String   @unique
}

model ruolo_Utente {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ruolo     String   @unique
    utenti    Utente[]
}

model Ticket {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    segnalatore  Utente   @relation(fields: [idUtente], references: [id])
    idUtente     Int
    applicazione String
    titolo       String
    descrizione  String
    risolto      Boolean  @default(false)
}

// Tabelle specifiche per l'applicazione PCTO

model pcto_Presenza {
    id           Int       @id @default(autoincrement())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    presenza     Utente    @relation(fields: [svoltoDa], references: [id])
    svoltoDa     Int       @default(1)
    creatoDa     Int
    dataPresenza DateTime  @default(now())
    oraInizio    DateTime?
    oraFine      DateTime?
    approvato    Boolean   @default(false)
    lavoraPer    pcto_Pcto @relation(fields: [idPcto], references: [id])
    idPcto       Int
}

model pcto_Valutazione {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    utente    Utente    @relation(fields: [creatoDa], references: [id])
    creatoDa  Int
    pcto      pcto_Pcto @relation(fields: [idPcto], references: [id])
    idPcto    Int
    qna       String
}

model pcto_Azienda {
    id                Int         @id @default(autoincrement())
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    creatore          Utente      @relation(fields: [creatoDa], references: [id])
    creatoDa          Int
    nome              String
    indirizzo         String?
    piva              String?
    telefono          String?
    email_privacy     String?
    direttore_nome    String?
    direttore_natoA   String?
    direttore_natoIl  DateTime?
    direttore_codiceF String?
    idConvenzione     String      @unique
    dataConvenzione   DateTime    @default(now())
    dataProtocollo    DateTime    @default(now())
    istituto          String      @default("ITT")
    offre             pcto_Pcto[]
    firma_convenzione Boolean     @default(false)
}

model pcto_Pcto {
    id                  Int                         @id @default(autoincrement())
    createdAt           DateTime                    @default(now())
    updatedAt           DateTime                    @updatedAt
    creatoDa            Int
    titolo              String
    descrizione         String?
    tutor_aziendale     String?
    tutor_telefono      String?
    tutor_email         String?
    tutor_scolastico    Utente?                     @relation(name: "tutor", fields: [idTutor], references: [id])
    idTutor             Int?
    dataInizio          DateTime
    dataFine            DateTime
    durata_ore          Int                         @default(0)
    offertoDa           pcto_Azienda                @relation(fields: [idAzienda], references: [id])
    idAzienda           Int
    valutatoDa          pcto_Valutazione[]
    valutazioneStudente pcto_Valutazione_Studente[]
    presenziatoDa       pcto_Presenza[]
    svoltoDa            Utente[]                    @relation("iscritto")
    contabilizzato      Boolean                     @default(false)
    anno_scolastico     Int?
    classe              Classe                      @relation(fields: [idClasse], references: [id])
    idClasse            Int                         @default(1)
    firma_pcto          Boolean                     @default(false)
    task1               String?
    task2               String?
    task3               String?
    task4               String?
    attrezzature        String?
}

model pcto_Valutazione_Studente {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    creatoDa    Int
    pcto        pcto_Pcto @relation(fields: [idPcto], references: [id])
    idPcto      Int
    stagista    Utente    @relation(fields: [idStagista], references: [id])
    idStagista  Int
    valutazione String
}

model programmazione_Template {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    docente   Utente   @relation(fields: [creatoDa], references: [id])
    creatoDa  Int
    nome      String
    template  String
    libro     String
    materia   Materia  @relation(fields: [idMateria], references: [id])
    idMateria Int
    note      String? // Note aggiuntive a disposizione dell'insegnante
}

model sicurezza_Corso {
    id            Int              @id @default(autoincrement())
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    creatoDa      Int
    titolo        String
    dataInizio    DateTime
    dataFine      DateTime
    dataTest      DateTime?
    tipo          String
    somministrato Boolean          @default(false)
    seguitoDa     Utente[]
    quiz          sicurezza_Test[]
}

model sicurezza_Test {
    id        Int             @id @default(autoincrement())
    createdAt DateTime        @default(now())
    updatedAt DateTime        @default(now()) @updatedAt
    creatoDa  Int
    tipo      String
    svolto    Boolean         @default(false)
    superato  Boolean         @default(false)
    domande   String?
    risposte  String?
    punti     Int             @default(0)
    punti_max Int             @default(0)
    studente  Utente          @relation(fields: [svoltoDa], references: [id])
    svoltoDa  Int
    corso     sicurezza_Corso @relation(fields: [idCorso], references: [id])
    idCorso   Int
}

model kpi_Stats {
    id                     Int      @id @default(autoincrement())
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
    n_utenti               Int?
    n_pcto_aziende_attive  Int?
    n_pcto_attivi          Int?
    n_studenti_pcto_attivi Int?
    n_ore_tot_pcto_attivi  Int?
    n_ore_tot_pcto         Int?
}
